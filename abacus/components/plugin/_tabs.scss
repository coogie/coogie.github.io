// styleguide:ignore:start
$component-name: 'tab';
// styleguide:ignore:end


// Plugins::Tabs
//
// Tabs are elements that help you organize and navigate multiple documents in
// a single container. They can be used for switching between items in the container.
//
// Enable tabbable tabs via JavaScript (each tab needs to be activated individually),
// with the following code:
// <pre>
//     $('#myTabs .tab__item a').on('click', function (e) {
//         e.preventDefault();
//         $(this).tab('show');
//     });
// </pre>
//
// .tab         - Tabs
// .tab--filter - Filter Tabs
// .tab--switch - Switch Tabs. It's possible to theme this modifier according to your channel or tab location by applying, for example, an override such as: `.tab--filter {color: #E06EA9;}` and then letting Abacus do the rest.
// .tab--flex   - Applies Flexbox to tab items. This will make them dynamically grow and shrink to consume the maximum space available to them. This modifier can be combined with any other tab modifier to achieve the desired effect.
//
// markup:
// <div class="tab {$modifiers}" id="demoTabs-{$modifiers}">
//     <!-- Nav tabs -->
//     <ul class="tab__list">
//         <li class="tab__item is-active"><a href="#home-{$modifiers}" data-toggle="tab">Home</a></li>
//         <li class="tab__item"><a href="#profile-{$modifiers}" data-toggle="tab">Profile</a></li>
//         <li class="tab__item"><a href="#messages-{$modifiers}" data-toggle="tab">Messages</a></li>
//         <li class="tab__item"><a href="#settings-{$modifiers}" data-toggle="tab">Settings</a></li>
//     </ul>
//     <!-- Tab panes -->
//     <div class="tab__content">
//         <div class="tab__pane is-active is-visible" id="home-{$modifiers}">
//             <div class="row">
//                 <div class="small-6 columns">First Column!</div>
//                 <div class="small-6 columns">Second Column!</div>
//             </div>
//         </div>
//         <div class="tab__pane" id="profile-{$modifiers}">Profile Content</div>
//         <div class="tab__pane" id="messages-{$modifiers}">Messages Content</div>
//         <div class="tab__pane" id="settings-{$modifiers}">Settings Content</div>
//     </div>
// </div>
//
// Styleguide 3.4

.#{$component-name} {
    margin-bottom: 1rem;
}


/**
    [1.1] - All tabs should be displayed inline, so let's extend the silent class.
*/
.#{$component-name}__list {
    @include list--inline; // [1.1]
}


/**
    [2.1] - Remove the bottom border to prevent the hiddeous double-width border
            appearing below Tab Items. Later on, we'll pull the content pane
            up one pixel to hide the border beneath the tabs.
    [2.2] - We remove the left margin from the first List Item to allow the
            tabs to sit flush with the left of the content panel.
    [2.3] - Make the links appear as inline-block to allow us better control
            over their box model.
*/
.#{$component-name}__item {
    background-image: linear-gradient(to bottom, #51a339, #3c782a);
    border: 1px solid #51a339;  // [2.1]
    border-bottom: 0;        // [2.1]
    border-radius: 3px 3px 0 0;
    box-shadow: inset 0 1px 0 rgba(#fff, .5);
    color: #fff;
    filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#51a339', endColorstr='#3c782a', GradientType=0 );
    margin: 0 .25rem;
    text-transform: uppercase;

    &:first-child {
        margin-left: 0; // [2.2]
    }

    &.is-active {
        background-color: #fff;
        background-image: none;
        border: 1px solid get-color('brand', 'grey-light');
        border-bottom: 0;
        box-shadow: none;
        color: #000;
        filter: progid:DXImageTransform.Microsoft.gradient( enabled = false );
    }

    a {
        color: currentColor;
        display: inline-block; // [2.3]
        padding: .35em .75em;
        text-decoration: none;
    }
}


/**
    [3.1] - Pull the content pane upwards 1 pixel to hide its top border under
            each of the Tabs Items.
*/
.#{$component-name}__content {
    background-color: #fff;
    border: 1px solid get-color('brand', 'grey-light');
    color: #000;
    margin-top: -1px;
    padding: 1rem;
}


/**
    [4.1] - We'll hide the panes by default, and only show them when the modifier
            classes (.is-active, .is-visible) are applied. The application of
            these classes are staggered in the JS, allowing us to use CSS
            animation to make them appear.
*/
.#{$component-name}__pane {
    display: none;                  // [4.1]
    opacity: 0;                     // [4.1]
    transform: translateY(-10px);   // [4.1]
    transition: opacity 150ms linear, transform 150ms linear;     // [4.1]

    &.is-active {
        display: block;             // [4.1]
    }

    &.is-visible {
        opacity: 1;                 // [4.1]
        transform: translateY(0);   // [4.1]
    }
}


// FILTER TABS VARIANT \\
// =================== \\

/**
    [5.1] - CSS Arrow. This psuedo element will appear as a small chevron beneath
            the element it's attached to. We use margin-top as a way of animating
            the chevron's position, and we use opacity for some tricksy hiding and
            showing of the chevron.
*/
.#{$component-name}--filter {
    .#{$component-name}__list {
        margin-bottom: .75rem;
    }

    .#{$component-name}__item {
        background-image: linear-gradient(to bottom, #adb2b9, #8c929e);
        border: 0;
        border-radius: 3px;
        filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#adb2b9', endColorstr='#8c929e', GradientType=0 );
        font-size: .85rem;
        position: relative;
        text-shadow: 1px 1px 0 rgba(#000, .25);
        z-index: 1;

        &::after {
            border: solid transparent;
            border-color: rgba(136, 183, 213, 0);
            border-top-color: #70767e;
            border-width: 5px;
            content: ' ';
            height: 0;
            left: 50%;
            margin-left: -5px;
            margin-top: -5px;         // [5.1]
            opacity: 0;               // [5.1]
            pointer-events: none;
            position: absolute;
            top: 100%;
            transition: 150ms linear; // [5.1]
            width: 0;
            z-index: -1;
        }

        &.is-active {
            background-image: linear-gradient(to bottom, #444a54, #70767e);
            color: #fff;
            filter: progid:DXImageTransform.Microsoft.gradient( startColorstr='#444a54', endColorstr='#70767e', GradientType=0 );

            // Is ok to nest this deep for pseudo element
            // scss-lint:disable NestingDepth
            &::after {
                margin-top: 0; // [5.1]
                opacity: 1;    // [5.1]
            }
            // scss-lint:enable NestingDepth
        }
    }
}


// SWITCH TABS VARIANT \\
// =================== \\

/**
    [6.1] - We define `color: #hex;` on the `.tab--switch` modifier class.
            While this may seem strange, the decision was made as it allows
            us to then use the `currentColor` keyword throughout the modifier.
            This gives us a vastly more powerful color cascade and allows for
            "theming" of the `.tab--switch` modifier by requiring that developers
            only need to overwrite this value with their desired color:
            E.g.: `.tab--switch {color: #E06EA9;}` would result in a bingo-themed
            tab component with minimal overrides required.
*/
.#{$component-name}--switch {
    color: #004833;

    .#{$component-name}__list {
        border: 1px solid currentColor;
        border-radius: 3px;
        color: currentColor;
        display: inline-block;
        margin-bottom: .75rem;
    }

    .#{$component-name}__item {
        background-color: transparent;
        background-image: none;
        border: 0;
        border-radius: 0;
        box-shadow: none;
        color: currentColor;
        margin: 0;

        &:not(:last-child) {
            border-right: 1px solid;
        }

        a {
            color: currentColor;
        }

        &.is-active {
            background-color: currentColor;
            color: currentColor;

            // We need to come up with a better solution for this nesting depth
            // scss-lint:disable NestingDepth
            a {
                color: #fff;
            }
            // scss-lint:enable NestingDepth
        }
    }

    .#{$component-name}__content {
        border: 0;
    }
}


// FLEXBOX TABS \\
// ============ \\
.#{$component-name}--flex {
    .#{$component-name}__list {
        display: flex;
        overflow-x: auto;
    }

    .#{$component-name}__item {
        flex: 1 1 0;

        &:last-child {
            margin-right: 0;
        }

        a {
            width: 100%;
        }
    }
}
